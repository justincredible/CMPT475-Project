/*
Yi (Andy) Li			301146455
Robert Mackenzie		200128755
Justin Symonds			301031838
Si Yuan (Oscar) Zhang	301127012
*/

CoreASM DMTD

use BasicASM
use Standard
use Math

/* Vocabulary */
enum TOKEN = { glassToken, crackedToken }

function break : MACHINE * PROCESS -> BOOLEAN
function token : MACHINE * PROCESS -> TOKEN
function next : MACHINE -> MACHINE
function reported : PROCESS -> BOOLEAN
/* monitored functions */
// When a machine is active whenever it has work to do for a given process
function Active : MACHINE * PROCESS -> BOOLEAN
function SendMessageEvent : MACHINE * PROCESS -> BOOLEAN
function CrackedTokenEvent : MACHINE * PROCESS -> BOOLEAN
function GlassTokenEvent : MACHINE * PROCESS -> BOOLEAN

universe Agents = { tester, environment }

init InitRule

rule InitRule = 
	seqblock
	nodes := toNumber(input("How many machines are in the system?"))
	processes := toNumber(input("How many concurrent processes are running?"))
	inactive := toNumber(input("What is the probability [0,1) a machine will become inactive for any process?"))
	sends := toNumber(input("What is the probability [0,1) a machine sends a message for any process?"))
	starts := toNumber(input("What is the probability [0,1) a machine already has work to do for any process?"))
	index := 0

	MACHINE := {}
	PROCESS := {}
	
	while (index < processes)
		{
		add "process_"+(index+1) to PROCESS
		index := index + 1
		}
	index := 0

	add "machine_"+index to MACHINE
	choose m in MACHINE with m = "machine_"+index do
		{
		Agents(m) := true
		program(m) := @SupervisorMachineProgram
		forall p in PROCESS do token(m,p) := crackedToken
		mach := m
		original := m
		}
	index := index + 1
	
	while (index < nodes)
		seqblock
		add "machine_"+index to MACHINE
		choose m in MACHINE with m = "machine_"+index do
			{
			Agents(m) := true
			program(m) := @RegularMachineProgram
			next(mach) := m
			mach := m
			}
		if index = nodes - 1 then next(mach) := original
		index := index + 1
		endseqblock

	forall p in PROCESS do
		{
		forall m in MACHINE do
			if random < starts then Active(m,p) := true
			else Active(m,p) := false
		reported(p) := false
		}

	/*forall m in Agents do
		print m+" "+machineRank(m)+" "+next(m)+" "+program(m)
	*/
	program(environment) := @EnvironmentProgram
	program(self) := undef
	endseqblock

rule ReactOnEvents(m,p) = 
	{
	if CrackedTokenEvent(m,p) then
		token(m,p) := crackedToken
	if GlassTokenEvent(m,p) then
		token(m,p) := glassToken
	if SendMessageEvent(m,p) then
		break(m,p) := true
	ClearEvents(m,p)
	}
	
rule ClearEvents(m,p) =
	{
	CrackedTokenEvent(m,p) := false
	GlassTokenEvent(m,p) := false
	SendMessageEvent(m,p) := false
	}

rule InitializeMachine(m,p) =
	{
	token(m,p) := undef
	break(m,p) := false
	}

rule ForwardToken(t,m,p) =
	{
	print "The "+t+" of "+p+" was passed to "+m+"."
	if t = glassToken then GlassTokenEvent(m,p) := true
	if t = crackedToken then CrackedTokenEvent(m,p) := true
	}

rule ReportGlobalTermination(p) =
	if not reported(p) then
		{
		print p+" terminated."
		reported(p) := true
		}

/*
 * Assumptions:
 * - a machine cannot react to events while creating them
 *
 */
rule RegularMachineProgram =
	choose p in PROCESS with reported(p) = false do
		seqblock
		ReactOnEvents(self,p)
		if not Active(self,p) and token(self,p) != undef then
			{
			InitializeMachine(self,p)
			if break(self,p) then ForwardToken(crackedToken,next(self),p)
			else ForwardToken(token(self,p),next(self),p)
			}
		endseqblock

rule SupervisorMachineProgram =
	choose p in PROCESS with reported(p) = false do
		seqblock
		ReactOnEvents(self,p)
		if not Active(self,p) and token(self,p) != undef then
			{
			InitializeMachine(self,p)
			if not break(self,p) and token(self,p) = glassToken then ReportGlobalTermination(p)
			else ForwardToken(glassToken,next(self),p)
			}
		endseqblock

/*
 * Assumptions:
 *	- a machine can only work on one process at any instant
 *	- a machine will send work for a given process to another machine only when the receiving machine does not already have work
 *
 */
rule EnvironmentProgram =
	forall m in MACHINE do
		choose p in PROCESS with Active(m,p) = true do
			{
			if random < sends then SendMessageEvent(m,p) := true
			if random < inactive then Active(m,p) := false
			}